from xml.etree.ElementTree import ElementTree
import glob
import subprocess
import os
import codecs
import threading
import time
import hashlib

taskParam_noThread = 10
taskParam_apklistfilename = './apklist.txt'
taskParam_resultfilename = 'F11_STR_smali.txt'
taskParam_rawdatadirname = "./RawData(3000)/"


def searchToEXconstString(dirname,constStrings):
    flist = os.listdir(dirname)
    for f in flist:
        next = os.path.join(dirname, f)
        if os.path.isdir(next):
            searchToEXconstString(next,constStrings)
        else:
            (strset)= extractconstString(next)
            constStrings.update(strset)

def extractconstString(filename):
    ext = os.path.splitext(filename)[-1]
    retStringSet = set()
    ongoing = False

    if ext == '.smali':
        if not os.path.exists(os.path.abspath(filename)):
            return (retStringSet)
        f = open(os.path.abspath(filename),'r')
        try:
            lines = f.readlines()
        except UnicodeDecodeError:
            return (retStringSet)

        for line in lines:
            if line.count('.method')==1:
                ongoing=True
            elif line.count('.end method')==1:
                ongoing=False
            elif ongoing==True:
                if not len(line.split()) == 0:
                    bytecode = line.split()[0]
                    if bytecode == 'const-string/jumbo':
                        if len(line.split('\"')) < 2:
                            continue
                        #retStringSet.add(line.split('\"')[1])
                        hashval = hashlib.sha512(line.split('\"')[1]).hexdigest()
                        retStringSet.add(hashval)
                    elif bytecode == 'const-string':
                        if len(line.split('\"')) < 2:
                            continue
                        #retStringSet.add(line.split('\"')[1])
                        hashval = hashlib.sha512(line.split('\"')[1]).hexdigest()
                        retStringSet.add(hashval)
        f.close()
    return (retStringSet)

class CollectStringFeatures(threading.Thread):

    def __init__(self, strs, apklist, locklist, flog) :
        threading.Thread.__init__(self)
        self.strs = strs
        self.locklist = locklist
        self.apklist = apklist
        self.flog = flog

    def run(self):
        for apk in self.apklist:
            print("stage 1:  "+apk+' start')
            dirname = taskParam_rawdatadirname+apk
            if not os.path.exists(dirname+'/'+apk+'_smali'):
                continue
            smalidirs = os.listdir(dirname+'/'+apk+'_smali')
            for d in smalidirs:
                smalidir = dirname+'/'+apk+'_smali'+'/'+d
                if not os.path.isdir(smalidir) or smalidir=='.' or smalidir == '/':
                    continue
                constStrings = set()
                searchToEXconstString(smalidir,constStrings)
                self.strs.update(constStrings)
            self.flog.write(apk)
            self.flog.write('\n')
            self.flog.flush()
############################## main ##############################
fapklist = open(taskParam_apklistfilename,'r') # get apk list
lines = fapklist.readlines()
fapklist.close()
noofapks = len(lines)
#seperate the total apks into the serveral group (for assigning the apks to the threads)
listOfapklist = list()
for m in range(0, taskParam_noThread+1):
    listOfapklist.append(list())
order = 0
for line in lines:
    order = order+1
    listOfapklist[(order%taskParam_noThread)].append(line[:-1])

tConstStringSet = set() # total string feature set

loglist = list()
for m in range(0, taskParam_noThread+1):
    fhowmany = open('howmany'+str(m)+'.txt','w')
    loglist.append(fhowmany)

# thread creation (# of thread = taskParam_noThread)
locklist = list()
for m in range(0, taskParam_noThread+1):
    locklist.append(threading.Lock())
t = list()
for m in range(0, taskParam_noThread+1):
    t.append(CollectStringFeatures(tConstStringSet, listOfapklist[m], locklist, loglist[m]))
#thread start
for m in range(0, taskParam_noThread+1):
    t[m].start()
#thread end
for m in range(0, taskParam_noThread+1):
    t[m].join()
#log all features
fstrlog = open(taskParam_resultfilename,'w')
#noOfstr = len(tConstStringSet)
#hashset = Set()
#for stritem in  tConstStringSet:
    #convert a string to a hash and log it to the file
#    hashval = hashlib.sha512(stritem).hexdigest()
#    hashset.add(str(hashval))
#    fstrlog.write(str(hashval))
#    fstrlog.write('\n')
for hashedStr in tConstStringSet:
    fstrlog.write(str(hashedStr))
    fstrlog.write('\n')
#noOfhash = len(hashset)
#print("hash "+str(noOfhash))
#print("str "+str(noOfstr))
fstrlog.close()
############################## end ###############################