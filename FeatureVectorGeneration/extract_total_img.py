from xml.etree.ElementTree import ElementTree
import glob
import subprocess
import os
import codecs
import threading
import time
import hoggen

taskParam_noThread = 10
taskParam_apklistfilename = './apklist.txt'
taskParam_resultfilename = 'Hogs.txt'
taskParam_rawdatadirname = "/media/ktg/FA58AC6258AC1EFF/Research/DNN_AndMal/RawData/"

def recordImageFeats(mainFname,filename):

    #if os.path.exists(mainFname):
    #    return
    mf = open(mainFname,'w')
    fd, err = hoggen.genhog(filename)
    if err == -1:
        return None, err
    strfd = ''
    for h in fd:
        mf.write(str(h)+' ')
        strfd += str(h)+' '
    mf.write('\n')
    mf.close()
    return strfd, err

class CollectIMGFeatures(threading.Thread):

    def __init__(self, imgs, apklist, locklist, flog) :
        threading.Thread.__init__(self)
        self.imgs = imgs
        self.locklist = locklist
        self.apklist = apklist
        self.flog = flog

    def run(self):
        for apk in self.apklist:
            print("stage 1:  "+apk+' start')
            dirname = taskParam_rawdatadirname+apk
            pnglist = glob.glob(dirname+'/*.png')
            jpglist = glob.glob(dirname+'/*.jpg')
            giflist = glob.glob(dirname+'/*.gif')
            mainFname = ''
            for png in pnglist:
                mainFname=dirname+'/'+os.path.basename(png)
                mainFname+='_hog.txt'
                strfd, err = recordImageFeats(mainFname,png)
                if not err == -1:
                    self.imgs.add(strfd)
            for jpg in jpglist:
                mainFname=dirname+'/'+os.path.basename(jpg)
                mainFname+='_hog.txt'
                strfd, err = recordImageFeats(mainFname,jpg)
                if not err == -1:
                    self.imgs.add(strfd)
            for gif in giflist:
                mainFname=dirname+'/'+os.path.basename(gif)
                mainFname+='_'
                mainFname+=os.path.basename(gif).split('_')[1]
                mainFname+='_hog.txt'
                strfd, err = recordImageFeats(mainFname,gif)
                if not err == -1:
                    self.imgs.add(strfd)
            self.flog.write(apk)
            self.flog.write('\n')
            self.flog.flush()
############################## main ##############################
fapklist = open(taskParam_apklistfilename,'r') # get apk list
lines = fapklist.readlines()
fapklist.close()
noofapks = len(lines)
#seperate the total apks into the serveral group (for assigning the apks to the threads)
listOfapklist = list()
for m in range(0, taskParam_noThread+1):
    listOfapklist.append(list())  
order = 0
for line in lines:
    order = order+1
    listOfapklist[(order%taskParam_noThread)].append(line[:-1])

tImgHogSet = set() # total img feature set

loglist = list()
for m in range(0, taskParam_noThread+1):
    fhowmany = open('howmany'+str(m)+'.txt','w')
    loglist.append(fhowmany)

# thread creation (# of thread = taskParam_noThread)
locklist = list()
for m in range(0, taskParam_noThread+1):
    locklist.append(threading.Lock())
t = list()
for m in range(0, taskParam_noThread+1):
    t.append(CollectIMGFeatures(tImgHogSet, listOfapklist[m], locklist, loglist[m]))
#thread start
for m in range(0, taskParam_noThread+1):
    t[m].start()
#thread end
for m in range(0, taskParam_noThread+1):
    t[m].join()
#log all features
fhlog = open(taskParam_resultfilename,'a')
for hitem in  tImgHogSet:
    fhlog.write(hitem)
    fhlog.write('\n')
fhlog.close()
############################## end ###############################