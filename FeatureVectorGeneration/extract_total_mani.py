from xml.etree.ElementTree import ElementTree
import glob
import subprocess
import os
import codecs
import threading
import time

taskParam_noThread = 10
taskParam_apklistfilename = './apklist.txt'
taskParam_resultfilename_F1 = 'F1_UPS_mani.txt'
taskParam_resultfilename_F2 = 'F2_UCS_mani.txt'
taskParam_resultfilename_F3 = 'F3_UFS_mani.txt'
taskParam_resultfilename_F4 = 'F4_ULS_mani.txt'
taskParam_resultfilename_F5 = 'F5_DPS_mani.txt'
taskParam_resultfilename_F6 = 'F6_USS_mani.txt'
taskParam_resultfilename_F7 = 'F7_ACT_mani.txt'
taskParam_resultfilename_F8 = 'F8_SERV_mani.txt'
taskParam_resultfilename_F9 = 'F9_PROV_mani.txt'
taskParam_resultfilename_F10 = 'F10_RECV_mani.txt'
taskParam_rawdatadirname = "./RawData(3000)/"

def extracManifFeatVect(filename):

    tree = ElementTree()
    root = tree.parse(filename)

    usesPermSet = set()
    for upElement in root.findall("uses-permission"):
        if '{http://schemas.android.com/apk/res/android}name' in upElement.attrib.keys():
            usesPermSet.add(upElement.attrib['{http://schemas.android.com/apk/res/android}name'])
        else:
            usesPermSet.add('name')
    susesPermSet = sorted(usesPermSet)

    usesConfSet = set()
    for ucElement in root.findall("uses-configuration"):
        if '{http://schemas.android.com/apk/res/android}name' in ucElement.attrib.keys():
            usesConfSet.add(ucElement.attrib['{http://schemas.android.com/apk/res/android}name'])
        else:
            usesConfSet.add('name')
    susesConfSet = sorted(usesConfSet)

    usesFeatSet = set()
    for ufElement in root.findall("uses-feature"):
        if '{http://schemas.android.com/apk/res/android}name' in ufElement.attrib.keys():
            usesFeatSet.add(ufElement.attrib['{http://schemas.android.com/apk/res/android}name'])
        else:
            usesFeatSet.add('name')
    susesFeatSet = sorted(usesFeatSet)

    usesLibSet = set()
    for ulElement in root.findall("uses-library"):
        if '{http://schemas.android.com/apk/res/android}name' in ulElement.attrib.keys():
            usesLibSet.add(ulElement.attrib['{http://schemas.android.com/apk/res/android}name'])
        else:
            usesLibSet.add('name')
    susesLibSet = sorted(usesLibSet)

    declarePermSet = set()
    for dpElement in root.findall("permission"):
        dPerm = list()
        if '{http://schemas.android.com/apk/res/android}name' in dpElement.attrib.keys():
            dPerm.append(dpElement.attrib['{http://schemas.android.com/apk/res/android}name'])
        else:
            dPerm.append('name')
        if '{http://schemas.android.com/apk/res/android}permissionGroup' in dpElement.attrib.keys():
            dPerm.append(dpElement.attrib['{http://schemas.android.com/apk/res/android}permissionGroup'])
        else:
            dPerm.append('permissionGroup')
        if '{http://schemas.android.com/apk/res/android}protectionLevel' in dpElement.attrib.keys():
            dPerm.append(dpElement.attrib['{http://schemas.android.com/apk/res/android}protectionLevel'])
        else:
            dPerm.append('protectionLevel')
        if not len(dPerm) == 0:
            declarePermSet.add(str(dPerm))
    sdeclarePermSet = sorted(declarePermSet)

    usesSdkSet = set()
    for usElement in root.findall("uses-sdk"):
        if '{http://schemas.android.com/apk/res/android}name' in usElement.attrib.keys():
            usesSdkSet.add(usElement.attrib['{http://schemas.android.com/apk/res/android}name'])
        else:
            usesSdkSet.add('name')
    susesSdkSet = sorted(usesSdkSet)

    ActivityList = list() ##
    ServiceList = list() ##
    ProviderList = list() ##
    ReceiverList = list() ##

    for appElement in root.findall("application"):
        for actElement in appElement.findall("activity"):
            Activity = list() ##
            if '{http://schemas.android.com/apk/res/android}permission' in actElement.attrib.keys():
                Activity.append(actElement.attrib['{http://schemas.android.com/apk/res/android}permission'])
            else:
                Activity.append('no_permission')
            intentlist = list()
            for intentElement in actElement.findall("intent-filter"):
                intent = list()
                setAct = set()
                setCate = set()
                setData = set()
                for act in intentElement.findall('action'):
                    if '{http://schemas.android.com/apk/res/android}name' in act.attrib.keys():
                        setAct.add(act.attrib['{http://schemas.android.com/apk/res/android}name'])
                    else:
                        setAct.add('no_name')
                for cate in intentElement.findall('category'):
                    if '{http://schemas.android.com/apk/res/android}name' in cate.attrib.keys():
                        setCate.add(cate.attrib['{http://schemas.android.com/apk/res/android}name'])
                    else:
                        setCate.add('no_name')
                for data in intentElement.findall('data'):
                    if '{http://schemas.android.com/apk/res/android}name' in data.attrib.keys():
                        setData.add(data.attrib['{http://schemas.android.com/apk/res/android}name'])
                    else:
                        setData.add('no_name')
                if not len(setAct) == 0:
                    intent.append(sorted(setAct))
                else:
                    intent.append('no_action')
                if not len(setCate) == 0:
                    intent.append(sorted(setCate))
                else:
                    intent.append('no_category')
                if not len(setData) == 0:
                    intent.append(sorted(setData))
                else:
                    intent.append('no_data')
                if not len(intent) == 0:
                    intentlist.append(intent)
                else:
                    intentlist.append('no_intent')
            if not len(intentlist) == 0:
                Activity.append(intentlist) ##
            else:
                Activity.append('no_intent')
            if not len(Activity) == 0:
                ActivityList.append(Activity) ##

        for servElement in appElement.findall("service"):
            Service = list() ##
            if '{http://schemas.android.com/apk/res/android}permission' in servElement.attrib.keys():
                Service.append(servElement.attrib['{http://schemas.android.com/apk/res/android}permission'])
            else:
                Service.append('no_permission')
            intentlist = list()
            for intentElement in servElement.findall("intent-filter"):
                intent = list()
                setAct = set()
                setCate = set()
                setData = set()
                for act in intentElement.findall('action'):
                    if '{http://schemas.android.com/apk/res/android}name' in act.attrib.keys():
                        setAct.add(act.attrib['{http://schemas.android.com/apk/res/android}name'])
                    else:
                        setAct.add('no_name')
                for cate in intentElement.findall('category'):
                    if '{http://schemas.android.com/apk/res/android}name' in cate.attrib.keys():
                        setCate.add(cate.attrib['{http://schemas.android.com/apk/res/android}name'])
                    else:
                        setCate.add('no_name')
                for data in intentElement.findall('data'):
                    if '{http://schemas.android.com/apk/res/android}name' in data.attrib.keys():
                        setData.add(data.attrib['{http://schemas.android.com/apk/res/android}name'])
                    else:
                        setData.add('no_name')
                if not len(setAct) == 0:
                    intent.append(sorted(setAct))
                else:
                    intent.append('no_action')
                if not len(setCate) == 0:
                    intent.append(sorted(setCate))
                else:
                    intent.append('no_category')
                if not len(setData) == 0:
                    intent.append(sorted(setData))
                else:
                    intent.append('no_data')
                if not len(intent) == 0:
                    intentlist.append(intent)
                else:
                    intentlist.append('no_intent')
            if not len(intentlist) == 0:
                Service.append(intentlist) ##
            else:
                Service.append('no_intent')
            if not len(Service) == 0:
                ServiceList.append(Service) #

        for provElement in appElement.findall("provider"):
            Provider = list() ##
            if '{http://schemas.android.com/apk/res/android}permission' in provElement.attrib.keys():
                Provider.append(provElement.attrib['{http://schemas.android.com/apk/res/android}permission'])
            else:
                Provider.append('no_permission')
            GUPlist = list()
            for GUPElement in provElement.findall('grant-uri-permission'):
                GUP = list();
                if '{http://schemas.android.com/apk/res/android}path' in GUPElement.attrib.keys():
                    GUP.append(GUPElement.attrib['{http://schemas.android.com/apk/res/android}path']) ##
                else:
                    GUP.append('no_name')
                if '{http://schemas.android.com/apk/res/android}pathPattern' in GUPElement.attrib.keys():
                    GUP.append(GUPElement.attrib['{http://schemas.android.com/apk/res/android}pathPattern']) ##
                else:
                    GUP.append('no_name')
                if '{http://schemas.android.com/apk/res/android}pathPrefix' in GUPElement.attrib.keys():
                    GUP.append(GUPElement.attrib['{http://schemas.android.com/apk/res/android}pathPrefix']) ##
                else:
                    GUP.append('no_name')
                if not len(GUP) == 0:
                    GUPlist.append(GUP)
            if not len(GUPlist)==0:
                Provider.append(GUPlist)
            else:
                Provider.append('no_grant-uri-permission')
            intentlist = list()
            for intentElement in provElement.findall("intent-filter"):
                intent = list()
                setAct = set()
                setCate = set()
                setData = set()
                for act in intentElement.findall('action'):
                    if '{http://schemas.android.com/apk/res/android}name' in act.attrib.keys():
                        setAct.add(act.attrib['{http://schemas.android.com/apk/res/android}name'])
                    else:
                        setAct.add('no_name')
                for cate in intentElement.findall('category'):
                    if '{http://schemas.android.com/apk/res/android}name' in cate.attrib.keys():
                        setCate.add(cate.attrib['{http://schemas.android.com/apk/res/android}name'])
                    else:
                        setCate.add('no_name')
                for data in intentElement.findall('data'):
                    if '{http://schemas.android.com/apk/res/android}name' in data.attrib.keys():
                        setData.add(data.attrib['{http://schemas.android.com/apk/res/android}name'])
                    else:
                        setData.add('no_name')
                if not len(setAct) == 0:
                    intent.append(sorted(setAct))
                else:
                    intent.append('no_action')
                if not len(setCate) == 0:
                    intent.append(sorted(setCate))
                else:
                    intent.append('no_category')
                if not len(setData) == 0:
                    intent.append(sorted(setData))
                else:
                    intent.append('no_data')
                if not len(intent) == 0:
                    intentlist.append(intent)
                else:
                    intentlist.append('no_intent')
            if not len(intentlist) == 0:
                Provider.append(intentlist) ##
            else:
                Provider.append('no_intent')
            if not len(Provider) == 0:
                ProviderList.append(Provider) ##

        for recvElement in appElement.findall("receiver"):
            Receiver = list() ##
            if '{http://schemas.android.com/apk/res/android}permission' in recvElement.attrib.keys():
                Receiver.append(recvElement.attrib['{http://schemas.android.com/apk/res/android}permission'])
            else:
                Receiver.append('no_permission')
            intentlist = list()
            for intentElement in recvElement.findall("intent-filter"):
                intent = list()
                setAct = set()
                setCate = set()
                setData = set()
                for act in intentElement.findall('action'):
                    if '{http://schemas.android.com/apk/res/android}name' in act.attrib.keys():
                        setAct.add(act.attrib['{http://schemas.android.com/apk/res/android}name'])
                    else:
                        setAct.add('no_name')
                for cate in intentElement.findall('category'):
                    if '{http://schemas.android.com/apk/res/android}name' in cate.attrib.keys():
                        setCate.add(cate.attrib['{http://schemas.android.com/apk/res/android}name'])
                    else:
                        setCate.add('no_name')
                for data in intentElement.findall('data'):
                    if '{http://schemas.android.com/apk/res/android}name' in data.attrib.keys():
                        setData.add(data.attrib['{http://schemas.android.com/apk/res/android}name'])
                    else:
                        setData.add('no_name')
                if not len(setAct) == 0:
                    intent.append(sorted(setAct))
                else:
                    intent.append('no_action')
                if not len(setCate) == 0:
                    intent.append(sorted(setCate))
                else:
                    intent.append('no_category')
                if not len(setData) == 0:
                    intent.append(sorted(setData))
                else:
                    intent.append('no_data')
                if not len(intent) == 0:
                    intentlist.append(intent)
                else:
                    intentlist.append('no_intent')
            if not len(intentlist) == 0:
                Receiver.append(intentlist) ##
            else:
                Receiver.append('no_intent')
            if not len(Receiver) == 0:
                ReceiverList.append(Receiver) ##

    return [susesPermSet, susesConfSet, susesFeatSet, susesLibSet, sdeclarePermSet, susesSdkSet, ActivityList, ServiceList, ProviderList, ReceiverList]

class CollectManifestFeatures(threading.Thread):

    def __init__(self, ups, ucs, ufs, uls, uss, dps, acts, servs, provs, recvs, apklist, locklist, flog) :
        threading.Thread.__init__(self)
        self.ups = ups
        self.ucs = ucs
        self.ufs = ufs
        self.uls = uls
        self.dps = dps
        self.uss = uss
        self.acts = acts
        self.servs = servs
        self.provs = provs
        self.recvs = recvs
        self.locklist = locklist
        self.apklist = apklist
        self.flog = flog

    def run(self):
        for apk in self.apklist:
            print("stage 1:  "+apk+' start')
            dirname = taskParam_rawdatadirname+apk
            manifile = dirname+'/'+apk+'_mani.xml'
            if not os.path.exists(manifile):
                continue
            xmlFeats = extracManifFeatVect(manifile)

            self.ups.update(xmlFeats[0])
            self.ucs.update(xmlFeats[1])
            self.ufs.update(xmlFeats[2])
            self.uls.update(xmlFeats[3])
            self.dps.update(xmlFeats[4])
            self.uss.update(xmlFeats[5])

            i=0
            for ai in xmlFeats[6]:
                self.acts.add(str(ai))

            for si in xmlFeats[7]:
                self.servs.add(str(si))

            for pi in xmlFeats[8]:
                self.provs.add(str(pi))

            for ri in xmlFeats[9]:
                self.recvs.add(str(ri))

            self.flog.write(apk)
            self.flog.write('\n')
            self.flog.flush()

############################## main ##############################
fapklist = open(taskParam_apklistfilename,'r') # get apk list
lines = fapklist.readlines()
fapklist.close()
noofapks = len(lines)
#seperate the total apks into the serveral group (for assigning the apks to the threads)
listOfapklist = list()
for m in range(0, taskParam_noThread+1):
    listOfapklist.append(list())
order = 0
for line in lines:
    order = order+1
    listOfapklist[(order%taskParam_noThread)].append(line[:-1])

# total main feature sets
tUPset = set()
tUCset = set()
tUFset = set()
tULset = set()
tDPset = set()
tUSset = set()
tACTset = set()
tSERVset = set()
tPROVset = set()
tRECVset = set()

loglist = list()
for m in range(0, taskParam_noThread+1):
    fhowmany = open('howmany'+str(m)+'.txt','w')
    loglist.append(fhowmany)

# thread creation (# of thread = taskParam_noThread)
locklist = list()
for m in range(0, taskParam_noThread+1):
    locklist.append(threading.Lock())
t = list()
for m in range(0, taskParam_noThread+1):
    t.append(CollectManifestFeatures(tUPset, tUCset, tUFset, tULset, tDPset, tUSset, tACTset, tSERVset, tPROVset, tRECVset, listOfapklist[m], locklist, loglist[m]))
#thread start
for m in range(0, taskParam_noThread+1):
    t[m].start()
#thread end
for m in range(0, taskParam_noThread+1):
    t[m].join()
#log all features
fupslog = open(taskParam_resultfilename_F1,'w')
for upsitem in  tUPset:
    fupslog.write(upsitem)
    fupslog.write('\n')
fupslog.close()
#
fucslog = open(taskParam_resultfilename_F2,'w')
for ucsitem in  tUCset:
    fucslog.write(ucsitem)
    fucslog.write('\n')
fucslog.close()
#
fufslog = open(taskParam_resultfilename_F3,'w')
for ufsitem in  tUFset:
    fufslog.write(ufsitem)
    fufslog.write('\n')
fufslog.close()
#
fulslog = open(taskParam_resultfilename_F4,'w')
for ulsitem in  tULset:
    fulslog.write(ulsitem)
    fulslog.write('\n')
fulslog.close()
#
fdpslog = open(taskParam_resultfilename_F5,'w')
for dpsitem in  tDPset:
    fdpslog.write(dpsitem)
    fdpslog.write('\n')
fdpslog.close()
#
fusslog = open(taskParam_resultfilename_F6,'w')
for ussitem in  tUSset:
    fusslog.write(ussitem)
    fusslog.write('\n')
fusslog.close()
#
factlog = open(taskParam_resultfilename_F7,'w')
for actitem in  tACTset:
    factlog.write(actitem)
    factlog.write('\n')
factlog.close()
#
fservlog = open(taskParam_resultfilename_F8,'w')
for servitem in  tSERVset:
    fservlog.write(servitem)
    fservlog.write('\n')
fservlog.close()
#
fprovlog = open(taskParam_resultfilename_F9,'w')
for provitem in  tPROVset:
    fprovlog.write(provitem)
    fprovlog.write('\n')
fprovlog.close()
#
frecvlog = open(taskParam_resultfilename_F10,'w')
for recvitem in  tRECVset:
    frecvlog.write(recvitem)
    frecvlog.write('\n')
frecvlog.close()
############################## end ###############################

