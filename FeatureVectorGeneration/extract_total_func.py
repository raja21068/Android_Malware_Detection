from xml.etree.ElementTree import ElementTree
import glob
import subprocess
import os
import codecs
import threading
import time
import hashlib

taskParam_noThread = 10
taskParam_syslistfilename = 'dangerSys.txt'
taskParam_oplistfilename = 'ArmOpcodes.txt'
taskParam_apklistfilename = './apklist.txt'
taskParam_resultfilename = 'Funcs.txt'
taskParam_rawdatadirname = "./RawData(3000)/"

def searchToEXfunc(dirname, funcs, dslist, oplist):
    flist = os.listdir(dirname)

    for f in flist:
        next = os.path.join(dirname, f)
        if os.path.isdir(next):
            searchToEXfunc(next,funcs, dslist, oplist)
        else:
            funcs.update(extractFunc(next,dslist,oplist))

def extractFunc(filename,dslist,oplist):
    ext = os.path.splitext(filename)[-1]
    FuncSet = set()
    numedge = 0
    numnode = 0
    if os.path.basename(filename)[0:3] != "sub":
        return FuncSet
    if ext == '.gdl':
        ongoing = False
        if filename.count('callgraph.gdl')==1:
            return FuncSet
        f = codecs.open(os.path.abspath(filename),errors='ignore')
        Ffeats = list()
        for index in range(1321+len(dslist)):
            Ffeats.append(0)
        try:
            lines = f.readlines()
        except UnicodeDecodeError:
            return FuncSet
        ii = 0
        for line in lines:
            s = line
            op = line.split()[0].lower()
            if op in oplist:
                if op == 'blx':
                    trane = s.replace(';',' ').replace('"',' ').replace('}',' ').replace('(',' ').replace(')',' ')
                    for e in trane.split():
                        #for sys in dslist:
                        #    if sys == e:
                        tmpSys = e.lower()
                        if tmpSys in dslist:
                            Ffeats[1321+dslist.index(tmpSys)] += 1
                        elif '__imp_'+e.lower() == e:
                            Ffeats[1321+dslist.index(tmpSys)] += 1
                elif op == 'bl':
                    trane = s.replace(';',' ').replace('"',' ').replace('}',' ').replace('(',' ').replace(')',' ')
                    for e in trane.split():
                        #for sys in dslist:
                        #    if sys == e:
                        tmpSys = e.lower()
                        if tmpSys in dslist:
                            Ffeats[1321+dslist.index(tmpSys)] += 1
                        elif '__imp_'+e.lower() == e:
                            Ffeats[1321+dslist.index(tmpSys)] += 1
                else:
                    Ffeats[oplist.index(op)] += 1
        f.close()
        FuncSet.add(tuple(Ffeats))
    return FuncSet

class CollectFuncFeatures(threading.Thread):

    def __init__(self, funcs, apklist, dslist, oplist, locklist, noprocessed, flog) :
        threading.Thread.__init__(self)
        self.funcs = funcs
        self.locklist = locklist
        self.apklist = apklist
        self.dslist = dslist
        self.oplist = oplist
        self.noprocessed = noprocessed
        self.flog = flog

    def run(self):
        for apk in self.apklist:
            
            if apk[0] == 'g': #####
                continue

            dirname = taskParam_rawdatadirname+apk ######
            solist = glob.glob(dirname+'/*.so')
            for sofile in solist:
                if os.path.exists(sofile[:-3]+'/GDL') or len(glob.glob(sofile[:-3]+'/*.gdl'))>0:
                    Funcs = set()
                    searchToEXfunc(sofile[:-3],Funcs, self.dslist, self.oplist)
                    for f in Funcs:
                        self.funcs.add(str(f))
                    self.funcs.update(Funcs)
            self.noprocessed=self.noprocessed+1
            print(" latest: "+str(apk))
            self.flog.write(apk)
            self.flog.write('\n')
            self.flog.flush()

def getArmOplist(filename, oplist):                    
    f = open(filename, 'r')
    for line in f.readlines():
        temp = line[:-1]
        op = ''
        if temp[-1] == '\r':
            op = temp[:-1]
        else:
            op = temp
        oplist.append(op) #i don't know why the txt file havs /r in each line, but anyway the code is added because of /r/n
    f.close()

def getSysList(filename , syslist):
    f = open(filename, 'r')
    for line in f.readlines():
        temp = line[:-1]
        s = ''
        if temp[-1] == '\r':
            s = temp[:-1]
        else:
            s = temp
        syslist.append(s)
    f.close()

############################## main ##############################
fapklist = open(taskParam_apklistfilename,'r') # get apk list
lines = fapklist.readlines()
fapklist.close()
noofapks = len(lines)
#seperate the total apks into the serveral group (for assigning the apks to the threads)
listOfapklist = list()
for m in range(0, taskParam_noThread+1):
    listOfapklist.append(list())  
order = 0
for line in lines:
    order = order+1
    listOfapklist[(order%taskParam_noThread)].append(line[:-1])

# get sys list from the txt file
syslist = list()
getSysList(taskParam_syslistfilename, syslist)

oplist = list()
getArmOplist(taskParam_oplistfilename, oplist)

Noprocessed = 0

tFuncSet = set() # total func feature set

loglist = list()
for m in range(0, taskParam_noThread+1):
    fhowmany = open('howmany'+str(m)+'.txt','w')
    loglist.append(fhowmany)

# thread creation (# of thread = taskParam_noThread)
locklist = list()
for m in range(0, taskParam_noThread+1):
    locklist.append(threading.Lock())
t = list()
for m in range(0, taskParam_noThread+1):
    t.append(CollectFuncFeatures(tFuncSet, listOfapklist[m], syslist, oplist, locklist, Noprocessed, loglist[m]))
#thread start
for m in range(0, taskParam_noThread+1):
    t[m].start()
#thread end
for m in range(0, taskParam_noThread+1):
    t[m].join()
#log all features
fflog = open(taskParam_resultfilename,'a')
for fitem in  tFuncSet:
    fflog.write(str(fitem))
fflog.close()
############################## end ###############################