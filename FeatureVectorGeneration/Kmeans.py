import re
import numpy as np
#numerical operation
import matplotlib.pyplot as plt
#matploit provides functions that draws graphs or etc.
from sklearn.cluster import MiniBatchKMeans
from sklearn.cluster import KMeans
import array
import numpy as np


def findminmax(dirname, filename):
    print('findminmax')
    mf = open(dirname+filename,'r')
    #TotalInstances = list()
    strfreq = ''
    intfreq = 0
    m = 0
    tmpcount=0
    minlist = list()
    maxlist = list()
    firstlineflag = True
    numberofinsatnces = 0
    numoffeattype = 0
    while True:
        ch = mf.read(1)
        if ch == '':
            break
        if ch == '(':
            AnInstance = list()
            strfreq = ''
        elif ch == ')':
            AnInstance.append(int(strfreq))
            numberofinsatnces += 1
            numoffeattype = len(AnInstance)
            if firstlineflag == True:
                for i in range(numoffeattype):
                    minlist.append(9999)
                    maxlist.append(-9999)
                firstlineflag = False
            for i in range(numoffeattype):
                if minlist[i]>AnInstance[i]:
                    minlist[i]=AnInstance[i]
                if maxlist[i]<AnInstance[i]:
                    maxlist[i]=AnInstance[i]
            tmpcount+=1
            strfreq = ''
        elif ch == ',':
            AnInstance.append(int(strfreq))
            strfreq = ''
        elif ch == ' ':
            continue
        else:
            strfreq += ch
    mf.close()

    fminmax = open(dirname+"Noofinstance_minmax_"+filename,'w')
    fminmax.write(str(numberofinsatnces))
    fminmax.write(' ')
    fminmax.write(str(numoffeattype))
    fminmax.write('\n')
    for minv in minlist:
        fminmax.write(str(minv))
        fminmax.write(' ')
    fminmax.write('\n')
    for maxv in maxlist:
        fminmax.write(str(maxv))
        fminmax.write(' ')
    fminmax.close()

        
def convertToNormVals(dirname, filename):
    print('convertToNormVals')
    mf = open(dirname+filename,'r')
    fminmax = open(dirname+"Noofinstance_minmax_"+filename,'r')
    lines = fminmax.readlines()
    minStrlist = lines[1].split()
    maxStrlist = lines[2].split()
    fminmax.close()
    strfreq = ''
    minlist = list()
    for minstr in minStrlist:
        minlist.append(float(minstr))
    maxlist = list()
    for maxstr in maxStrlist:
        maxlist.append(float(maxstr))

    fnorm = open(dirname+"Norm_"+filename,'w')
    while True:
        ch = mf.read(1)
        if ch == '':
            break
        if ch == '(':
            AnInstance = list()
            strfreq = ''
        elif ch == ')':
            AnInstance.append(float(strfreq))
            strfreq = ''
            for i in range(len(AnInstance)):
                if minlist[i]>maxlist[i]:
                    exit()
                if minlist[i] == 0 and maxlist[i] == 0:
                    AnInstance[i] = 0 #should be consided again later...
                elif minlist[i] == maxlist[i]:
                    AnInstance[i] = 0 #should be consided again later...
                else:
                    AnInstance[i] = float(float((AnInstance[i]-minlist[i]))/float((maxlist[i]-minlist[i])))
            
            for i in range(len(AnInstance)):
                fnorm.write(str(AnInstance[i]))
                fnorm.write(' ')
            fnorm.write('\n')

        elif ch == ',':
            AnInstance.append(float(strfreq))
            strfreq = ''
        elif ch == ' ':
            continue
        else:
            strfreq += ch
    mf.close()
    fnorm.close()


def convertToNTemplate(dirname, filename):
    print('convertToTemplate')
    mf = open(dirname+filename,'r')
    strfreq = ''
    f = open(dirname+"NewTemp_"+filename,'w')
    AllZero = True
    noinstances = 0
    nofeattype = 0
    while True:
        ch = mf.read(1)
        if ch == '':
            break
        if ch == '(':
            AnInstance = list()
            AllZero = True
            strfreq = ''
        elif ch == ')':
            if not float(strfreq) == 0.0:
                AllZero = False
            AnInstance.append(float(strfreq))
            nofeattype = len(AnInstance)
            if AllZero == False:
                noinstances +=1
                strfreq = ''       
                for i in range(len(AnInstance)):
                    f.write(str(AnInstance[i]))
                    f.write(' ')
                f.write('\n')
        elif ch == ',':
            if not float(strfreq) == 0.0:
                AllZero = False
            AnInstance.append(float(strfreq))
            strfreq = ''
        elif ch == ' ':
            continue
        else:
            strfreq += ch
    mf.close()
    f.close()
    return noinstances, nofeattype




def readNormInstances(dirname, filename, numberofinsatnces, numoffeattype):
    print('readNormInstances')

    TotalInstances = np.empty(numberofinsatnces*numoffeattype,dtype='float64')
    f = open(dirname+filename,'r')
    index = 0
    #for line in f:
    while True:
        line = f.readline()
        if line == '':
            break
        s = line.split()
        for ss in s:
            TotalInstances[index] = float(ss)
            index +=1
    TotalInstances = np.reshape(TotalInstances, (numberofinsatnces,numoffeattype))
    f.close()
    return TotalInstances

def divideIntoTwoSets(TotalInstances, numoffeattypeA, numoffeattypeB):

    TotalInstances = np.hsplit(TotalInstances, np.array([numoffeattypeA, numoffeattypeA+numoffeattypeB]))
    return TotalInstances[0], TotalInstances[1]

def minikmeanGo(TotalInstances, dirname, filename, nocluster):
    np.random.seed(5)
    noOfCluster = nocluster
    kmeans = MiniBatchKMeans(n_clusters=noOfCluster)
    print(kmeans)

    kmeans.fit(TotalInstances)

    print('fitting done')

    centroids = kmeans.cluster_centers_

    resultF = open(dirname+filename,'w')

    for centroid in centroids:
        for v in centroid:
            resultF.write(str(v)+' ')
        resultF.write('\n')

    resultF.close()

def KmeanGo(TotalInstances, dirname, filename, nocluster):
    np.random.seed(5)
    noOfCluster = nocluster
    kmeans = KMeans(n_clusters=noOfCluster, n_jobs=5)
    print(kmeans)

    kmeans.fit(TotalInstances)

    print('fitting done')

    centroids = kmeans.cluster_centers_

    resultF = open(dirname+filename,'w')

    for centroid in centroids:
        for v in centroid:
            resultF.write(str(v)+' ')
        resultF.write('\n')

    resultF.close()



#findminmax('./40000TotalSets/','Funcs.txt')
#findminmax('./40000TotalSets/','Methods.txt')

#noinstances, nofeattype = convertToNTemplate('./40000TotalSets/','Funcs.txt')
#t = readNormInstances('./40000TotalSets/', 'NewTemp_Funcs.txt', noinstances, nofeattype)
#minikmeanGo(t, './40000TotalSets/', 'F13_FUNCTIONS_so.txt')

"""
noinstances, nofeattype = convertToNTemplate('./','Funcs.txt')
t = readNormInstances('./', 'NewTemp_Funcs.txt', noinstances, nofeattype)
ta, tb = divideIntoTwoSets(t, 1321, 555)
minikmeanGo(tb, './', 'F13_FUNCTIONS_so_SYS.txt', 200)
minikmeanGo(ta, './', 'F13_FUNCTIONS_so_OP.txt', 2500)
"""

noinstances, nofeattype = convertToNTemplate('./','Methods.txt')
t = readNormInstances('./', 'NewTemp_Methods.txt', noinstances, nofeattype)
ta, tb = divideIntoTwoSets(t, 217, 238)
KmeanGo(tb, './', 'F12_METHOD_smali_API.txt', 1000)
KmeanGo(ta, './', 'F12_METHOD_smali_OP.txt', 5000)
